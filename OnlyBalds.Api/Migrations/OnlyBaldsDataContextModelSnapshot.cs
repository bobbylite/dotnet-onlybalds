// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlyBalds.Api.Data;

#nullable disable

namespace OnlyBalds.Api.Migrations
{
    [DbContext(typeof(OnlyBaldsDataContext))]
    partial class OnlyBaldsDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlyBalds.Api.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasSubmittedQuestionnaire")
                        .HasColumnType("boolean");

                    b.Property<string>("IdentityProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.CommentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("CommentItems");
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FavoritedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.PostItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PostItems");
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.QuestionnaireData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("BaldCareRoutine")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "baldCareRoutine");

                    b.Property<string>("BaldType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "baldType");

                    b.Property<List<string>>("CleaningMethods")
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "cleaningMethods");

                    b.Property<string>("CleaningMethodsOther")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "cleaningMethodsOther");

                    b.Property<string>("ConfidenceLevel")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "confidenceLevel");

                    b.Property<List<string>>("Goals")
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "goals");

                    b.Property<string>("GoalsOther")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "goalsOther");

                    b.Property<List<string>>("Interests")
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "interests");

                    b.Property<string>("MonthlySpend")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "monthlySpend");

                    b.Property<string>("NewRoutine")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "newRoutine");

                    b.Property<string>("ProductsUsed")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "productsUsed");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId")
                        .IsUnique();

                    b.ToTable("QuestionnaireData");

                    b.HasAnnotation("Relational:JsonPropertyName", "data");
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.QuestionnaireItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "displayName");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "isCompleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "lastName");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "startDate");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("QuestionnaireItems");
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.ThreadItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ThreadItems");
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.CommentItem", b =>
                {
                    b.HasOne("OnlyBalds.Api.Models.PostItem", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.Favorite", b =>
                {
                    b.HasOne("OnlyBalds.Api.Models.PostItem", null)
                        .WithMany("Favorites")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.QuestionnaireData", b =>
                {
                    b.HasOne("OnlyBalds.Api.Models.QuestionnaireItems", null)
                        .WithOne("Data")
                        .HasForeignKey("OnlyBalds.Api.Models.QuestionnaireData", "QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.QuestionnaireItems", b =>
                {
                    b.HasOne("OnlyBalds.Api.Models.Account", null)
                        .WithOne("Questionnaire")
                        .HasForeignKey("OnlyBalds.Api.Models.QuestionnaireItems", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.Account", b =>
                {
                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.PostItem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("OnlyBalds.Api.Models.QuestionnaireItems", b =>
                {
                    b.Navigation("Data");
                });
#pragma warning restore 612, 618
        }
    }
}
