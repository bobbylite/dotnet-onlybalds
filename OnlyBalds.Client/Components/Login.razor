@using Microsoft.AspNetCore.Components.Authorization

@implements IDisposable

@inject NavigationManager NavigationManager
<AuthorizeView>
    <Authorized>        
        <form method="post" action="authentication/logout">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@NavigationManager.BaseUri" />
            <button type="submit" class="nav-link">
                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout @context.User.Claims?.FirstOrDefault(c => c.Type == "name")?.Value
            </button>
        </form>
    </Authorized>
    <NotAuthorized>
        <form method="get" action="authentication/login">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <button type="submit" class="nav-link">
                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Login
            </button>
        </form>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/authentication/login");
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}