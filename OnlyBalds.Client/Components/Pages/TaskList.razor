@page "/Tasks"

@attribute [Authorize]

@inject IHttpClientFactory HttpClientFactory

<h3>Tasks</h3>

@if (_threads is null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (ThreadItem threadItem in _threads)
        {
            <li>
                @threadItem.Name
            </li>
        }
    </ul>
}

<input @bind="_newThread" />
<button @onclick="AddThreadAsync">Add Thread</button>

@code {

    private List<ThreadItem>? _threads;

    private string _newThread = String.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var httpClient = HttpClientFactory.CreateClient("threads-api");
            
            // Don't include leading slash - see https://stackoverflow.com/a/23438417
            _threads = await httpClient.GetFromJsonAsync<List<ThreadItem>>("threads") ?? new();
            
            StateHasChanged();
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string Username = "";

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            Username = state?.User?.Identity?.Name ?? string.Empty;
        }
        await base.OnInitializedAsync();
    }

    private async Task AddThreadAsync()
    {
        if (String.IsNullOrEmpty(_newThread))
        {
            return;
        }

        var threadItem = new ThreadItem()
        {
            Name = _newThread
        };
        
        var httpClient = HttpClientFactory.CreateClient("threads-api");

        var responseMessage = await httpClient.PostAsJsonAsync("threads", threadItem);

        responseMessage.EnsureSuccessStatusCode();

        if (_threads is null)
        {
            return;
        }

        _threads.Add(threadItem);

        _newThread = String.Empty;

        StateHasChanged();
    }
}