@page "/Marketplace"
@implements IDisposable

@attribute [Authorize]

@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager


@if(IsDownloading) {
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
        </div>
    </div>
}

<div id="my-store-103074754"></div>

@code {
    private bool IsDownloading = true;
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<Marketplace>? objRef;


    protected override void OnInitialized()
    {
        NavManager.LocationChanged += HandleLocationChanged;
        objRef = DotNetObjectReference.Create(this);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (jsModule is not null)
        {
            return;
        }

        jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Marketplace.razor.js");

        if (firstRender)
        {
            await jsModule.InvokeVoidAsync("onLoad");
            await jsModule.InvokeVoidAsync("downloadMarketplace","my-store-103074754", objRef);

            StateHasChanged();
        }
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var uri = new Uri(e.Location);

        if (uri.Fragment.Contains("#!/")) {
            NavManager.NavigateTo($"/MarketplaceCheckout/Default/{uri.Fragment}");
        }
    }

    [JSInvokable]
    public void CompleteDownloading() { 
        IsDownloading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }
}