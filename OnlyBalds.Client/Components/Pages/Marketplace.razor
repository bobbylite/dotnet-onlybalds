@page "/Marketplace"

@using Flurl

@implements IAsyncDisposable

@attribute [Authorize]

@inject ILogger<Marketplace> logger
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<title>Store</title>

@if(IsDownloading) {
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
        </div>
    </div>
}

<div id="my-store-103074754"></div>

@code {
    private bool IsDownloading = true;
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<Marketplace>? objRef;

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;
        objRef = DotNetObjectReference.Create(this);
        base.OnInitialized();
    }
    
    /// <inheritdoc/>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (jsModule is not null)
        {
            return;
        }

        jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Marketplace.razor.js");

        if (firstRender)
        {
            await jsModule.InvokeVoidAsync("onLoad");
            await jsModule.InvokeVoidAsync("downloadMarketplace","my-store-103074754", objRef);

            StateHasChanged();
        }
    }

    /// <summary>
    /// Handle the location change event
    /// </summary>
    [JSInvokable]
    public void CompleteDownloading() { 

        if (!NavManager.Uri.Contains("#")) {
            var fragmentUri = NavManager.BaseUri.AppendPathSegment("Marketplace").SetFragment("my-store-103074754");
            NavManager.NavigateTo(fragmentUri);
        }

        IsDownloading = false;
        StateHasChanged();
    }

    /// <summary>
    /// Dispose of the object reference and remove the event handler
    /// </summary>
    public async ValueTask DisposeAsync()
    {
        if (jsModule is  null)
        {
            return;
        }
        await jsModule.InvokeVoidAsync("dispose");
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (jsModule is null)
        {
            return;
        }

        await jsModule.InvokeVoidAsync("unloadEcwidAccountComponents", e.Location, objRef);
    }
}
