@page "/Posts/{ThreadId}"
@attribute [Authorize]

@inject IHttpClientFactory httpClientFactory
@inject ILogger<Threads> logger;

@if (_posts is null)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <h1 class="mb-4">Posts</h1>

    foreach (var post in _posts)
    {
        <div class="card mb-3 shadow-sm">
            <div class="card-body">
                <h5 class="card-title">@post.Title</h5>
                <h6 class="card-subtitle mb-2 text-muted">Posted by @post.Author on @post.PostedOn.ToShortDateString()</h6>
                <p class="card-text">@post.Content</p>
                <a href="/Post-Details/@post.Id" class="btn btn-primary">Read more</a>
            </div>
        </div>
    }

    <a class="btn btn-primary mt-3" href="CreatePost/@ThreadId">
        Create Post
    </a>
}

@code {
    [Parameter]
    public string ThreadId { get; set; } = string.Empty;
    
    private string _username = string.Empty;
    
    private List<PostItem>? _posts;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var httpClient = httpClientFactory.CreateClient(HttpClientNames.OnlyBalds);
            logger.LogInformation("Getting posts from API");

            // Don't include leading slash - see https://stackoverflow.com/a/23438417
            _posts = await httpClient.GetFromJsonAsync<List<PostItem>>("posts") ?? new();
            // TODO: Filter for posts associated with the current thread.
            logger.LogInformation("Posts retrieved from API: {Posts}", JsonSerializer.Serialize(_posts));
            
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            _username = state?.User?.Identity?.Name ?? string.Empty;
        }
        await base.OnInitializedAsync();
    }
}
