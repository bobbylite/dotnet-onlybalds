@page "/CreatePost/{ThreadId}"

@attribute [Authorize]

@inject NavigationManager NavigationManager;
@inject IHttpClientFactory httpClientFactory
@inject ILogger<Threads> logger;

@if (_isInitialized is false)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <h3 class="mb-4">Create Post</h3>

        <div class="mb-3">
            <label for="Title" class="form-label">Title</label>
            <input @bind=@_title type ="text" id="Title" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="Summary" class="form-label">Content</label>
            <textarea @bind=@_content id="Summary" class="form-control" rows="3"></textarea>
        </div>

        <button type="submit" class="btn btn-primary mt-3" @onclick="AddPostAsync">Submit</button>
    </div>
}

@code {
    [Parameter]
    public string ThreadId { get; set; } = string.Empty;

    private bool _isInitialized = false;
    private string _title = string.Empty;
    private string _content = string.Empty;
    private string _username = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            _username = state?.User?.Identity?.Name ?? string.Empty;
        }
        await base.OnInitializedAsync();
        _isInitialized = true;

        StateHasChanged();
    }

    private async Task AddPostAsync()
    {
        if (string.IsNullOrEmpty(_title) || string.IsNullOrEmpty(_content))
        {
            logger.LogWarning("Title or summary is empty");
            return;
        }

        var postItem = new PostItem()
        {
            Id = Guid.NewGuid(),
            Title = _title,
            Content = _content,
            PostedOn = DateTime.Now,
            Author = _username
            // TODO: Add the ThreadId.
        };
        
        var httpClient = httpClientFactory.CreateClient(HttpClientNames.OnlyBalds);

        var responseMessage = await httpClient.PostAsJsonAsync("posts", postItem);

        responseMessage.EnsureSuccessStatusCode();

        var threadsResponse = await httpClient.GetFromJsonAsync<List<ThreadItem>>("threads") ?? new();
        var currentThread = threadsResponse.Find(t => t.Id == Guid.Parse(ThreadId));

        if (currentThread is null)
        {
            logger.LogWarning("Thread not found");
            return;
        }

        var putThreadsResponse = await httpClient.PutAsJsonAsync($"threads/{ThreadId}", new ThreadItem
        {
            Id = Guid.Parse(ThreadId),
            PostsCount = currentThread.PostsCount++
        });

        putThreadsResponse.EnsureSuccessStatusCode();

        _title = String.Empty;
        _content = String.Empty;

        StateHasChanged();

        NavigationManager.NavigateTo("/Posts");
    }
}
