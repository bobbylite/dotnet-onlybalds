@page "/CreatePost/{ThreadId}"

@attribute [Authorize]

@inject NavigationManager NavigationManager;
@inject IHttpClientFactory httpClientFactory
@inject ILogger<Threads> logger;

@if (isInitialized is false)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <h3 class="mb-4">Create Post</h3>

        <div class="mb-3">
            <label for="Title" class="form-label">Title</label>
            <input @bind=@title type ="text" id="Title" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="Summary" class="form-label">Content</label>
            <textarea @bind=@content id="Summary" class="form-control" rows="3"></textarea>
        </div>

        <button type="submit" class="btn btn-primary mt-3" @onclick="AddPostAsync">Submit</button>
    </div>
}

@code {
    [Parameter]
    public string ThreadId { get; set; } = string.Empty;
    private bool isInitialized = false;
    private string title = string.Empty;
    private string content = string.Empty;
    private string username = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            username = state?.User?.Claims?.FirstOrDefault(c => c.Type == "name")?.Value ?? string.Empty;
        }
        await base.OnInitializedAsync();
        isInitialized = true;

        StateHasChanged();
    }

    private async Task AddPostAsync()
    {
        if (string.IsNullOrEmpty(title) || string.IsNullOrEmpty(content))
        {
            logger.LogWarning("Title or summary is empty");
            return;
        }

        var postItem = new PostItem()
        {
            Id = Guid.NewGuid(),
            Title = title,
            Content = content,
            PostedOn = DateTime.Now,
            Author = username,
            ThreadId = Guid.Parse(ThreadId)
        };
        
        var httpClient = httpClientFactory.CreateClient(HttpClientNames.OnlyBalds);

        var responseMessage = await httpClient.PostAsJsonAsync("api/v2/posts/posts", postItem);

        responseMessage.EnsureSuccessStatusCode();

        var threadsResponse = await httpClient.GetFromJsonAsync<List<ThreadItem>>("api/v2/threads/threads") ?? new();
        var currentThread = threadsResponse.Find(t => t.Id == Guid.Parse(ThreadId));

        if (currentThread is null)
        {
            logger.LogWarning("Thread not found");
            return;
        }

        var putThreadsResponse = await httpClient.PutAsJsonAsync($"api/v2/threads/threads/{ThreadId}", new ThreadItem
        {
            PostsCount = currentThread.PostsCount + 1,
            Id = currentThread.Id,
            Title = currentThread.Title,
            Summary = currentThread.Summary,
            StartDate = currentThread.StartDate,
            Creator = currentThread.Creator
        });

        putThreadsResponse.EnsureSuccessStatusCode();

        title = String.Empty;
        content = String.Empty;

        StateHasChanged();

        NavigationManager.NavigateTo($"/Posts/{ThreadId}");
    }
}
