@page "/Threads"

@attribute [Authorize]

@inject IHttpClientFactory httpClientFactory
@inject ILogger<Threads> logger;
@inject IJSRuntime JSRuntime

@if (threads is null)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <h1 class="mb-4">Threads</h1>

    <div class="list-group">
        @foreach (ThreadItem thread in threads)
        {
            <a href="Posts/@thread.Id" class="list-group-item list-group-item-action p-3 mt-2">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">@thread.Title</h5>
                    <small class="text-muted">Posts: @thread.PostsCount</small>
                </div>
                <p class="mb-1">@thread.Summary</p>
                <small class="text-muted">Started by @thread.Creator on @thread.StartDate.ToShortDateString()</small>
            </a>
        }
    </div>

    <a class="btn btn-primary mt-3" href="CreateThread">
        Create Thread
    </a>
}

@code {
    private string username = string.Empty;
    
    private List<ThreadItem>? threads;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Threads.razor.js");
            await jsModule.InvokeVoidAsync("onLoad");

            var httpClient = httpClientFactory.CreateClient(HttpClientNames.OnlyBalds);
            logger.LogInformation("Getting threads from API");

            // Don't include leading slash - see https://stackoverflow.com/a/23438417
            threads = await httpClient.GetFromJsonAsync<List<ThreadItem>>("threads") ?? new();
            logger.LogInformation("Threads retrieved from API: {Threads}", JsonSerializer.Serialize(threads));
            
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            username = state?.User?.Claims?.FirstOrDefault(c => c.Type == "name")?.Value ?? string.Empty;
        }
        await base.OnInitializedAsync();
    }
}