@page "/ChatRoom"
@implements IAsyncDisposable

@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<title>Chat</title>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-6">
            <h3 class="text-center mt-5 mb-3">Chat Room</h3>
            <div class="chat-box vh-50 overflow-auto mb-4 bg-light shadow rounded" style="max-height: calc(100vh - 200px);">
                <ul class="list-group list-group-flush">
                    @foreach (var message in messages)
                    {
                        <li class="list-group-item border-0 p-2">
                            <span class="badge bg-primary me-2">@message.User:</span>
                            <span>@message.Content</span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@if(IsConnected)
{ 
    <div class="fixed-bottom p-3 onlybalds-background-color">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-12 col-md-8 col-lg-6">
                    <div class="input-group shadow rounded">
                        <input @bind="messageToSend" id="message-to-send" type="text" class="form-control" placeholder="Type a message..." />
                        <button @onclick="SendOnClick" id="send-button" class="btn btn-primary">
                            Send
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{ 
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-grow text-primary" style="width: 3rem; height: 3rem;" role="status"></div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    public HubConnection? hubConnection;
    private List<ChatMessageModel> messages = new();
    private string messageToSend = string.Empty;
    private string user = string.Empty;
    private DotNetObjectReference<ChatRoom>? objRef;

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            user = state?.User?.Claims?.FirstOrDefault(c => c.Type == "name")?.Value ?? string.Empty;
        }
        objRef = DotNetObjectReference.Create(this);
        await base.OnInitializedAsync();
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {   
            var jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/ChatRoom.razor.js");
            await jsModule.InvokeVoidAsync("collapseNavbar");
            await jsModule.InvokeVoidAsync("handleOnSendOrEnterKeyPressed", objRef);

            await Connect();
        }
    }

    /// <summary>
    /// Connects to the chat hub.
    /// </summary>
    [JSInvokable]
    public async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={user}"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (username, message) =>
        {
            ChatMessageModel chatMessage = new()
            {
                User = username,
                Content = message,
                Timestamp = DateTime.Now
            };

            messages.Add(chatMessage);
            StateHasChanged();
        });

        if (hubConnection.State is not HubConnectionState.Connected)
        {
            await hubConnection.StartAsync();
        }
    }

    /// <summary>
    /// Sends a message to the chat hub.
    /// </summary>
    [JSInvokable]
    public async Task Send(string messageToSend)
    {
        if (hubConnection is null)
        {
            return;
        }  

        await hubConnection.SendAsync("SendMessage", user, messageToSend);
        StateHasChanged();
    }

    /// <inheritdoc />
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }

    private async Task SendOnClick()
    {
        if (string.IsNullOrWhiteSpace(messageToSend))
        {
            return;
        }

        await Send(messageToSend);
        messageToSend = string.Empty;
    }
}
