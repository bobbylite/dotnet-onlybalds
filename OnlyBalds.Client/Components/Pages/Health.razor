@page "/HealthChecks"

@inject IHttpClientFactory httpClientFactory
@inject ILogger<Threads> logger;
@inject IJSRuntime JSRuntime

@if (isCheckingHealth)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
        </div>
    </div>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div class="container d-flex justify-content-center align-items-center vh-50">
                <div class="card shadow-lg w-100" style="max-width: 600px;">
                    <div class="card-body">
                        <span>
                            <lottie-player src="https://lottie.host/b1a7c222-c6af-448d-a8e6-7784f2a361f0/waE3FHTfox.json"
                                background="##fff"
                                speed="1.5"
                                style="z-index: 1000;width: 100px; height: 100px"
                                loop
                                autoplay
                                direction="1"
                                mode="normal">
                            </lottie-player>
                            <h1 class="card-title text-center mb-4 ml-5">Health Checks</h1>
                        </span>

                        <!-- Overall status -->
                        <div id="healthCheckStatus" class="alert text-center" role="alert">
                            <strong>Status: </strong>
                            <span id="status"></span>
                        </div>

                        <!-- Total duration -->
                        <p class="text-center">
                            <strong>Duration: </strong>
                            <span id="startTime"></span>
                        </p>

                        <!-- Individual services -->
                        <ul id='healthCheckList' class="list-group">
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Example Health Check
                                <span id='degrededBadge' class="badge bg-warning text-dark">Degraded</span>
                                <span id='degrededBadge' class="badge bg-danger">Unhealthy</span>
                                <span id='degrededBadge' class="badge bg-success">Healthy</span>
                            </li>
                        </ul>

                        <div class="mt-4 text-center">
                            <button id='refresh-health-check' class="btn btn-primary">Refresh</button>
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <OnlyBaldsNotAuthorized />
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    private bool isCheckingHealth = true;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    
     private DotNetObjectReference<Health>? objRef;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
        base.OnInitialized();
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!authenticationState?.Result?.User?.Identity?.IsAuthenticated ?? false)
            {
                logger.LogDebug("Unauthorized user attempted to access health check page");
                isCheckingHealth = false;
                StateHasChanged();
                return;
            }

            var jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Health.razor.js");
            
            var healthCheck = await GetHealthCheckAsync();

            await jsModule.InvokeVoidAsync("onRender", objRef, healthCheck);
            isCheckingHealth = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Gets the health check from the OnlyBalds API.
    /// </summary>
    [JSInvokable]
    public async Task<string> GetHealthCheckAsync()
    {
        var healthCheckClient = httpClientFactory.CreateClient(HttpClientNames.OnlyBalds);
        logger.LogDebug("Performing health check with OnlyBalds Health API");

        var healthCheckResponse =  await healthCheckClient.GetAsync("health");
        
        if (!healthCheckResponse.IsSuccessStatusCode)
        {
            logger.LogInformation("Health check failed with status code {StatusCode}", healthCheckResponse.StatusCode);
        }

        var serializedHealthCheck = await healthCheckResponse.Content.ReadAsStringAsync();
        var healthCheck = JsonSerializer.Deserialize<HealthItem>(serializedHealthCheck);


        if (healthCheck is null)
        {
            logger.LogDebug("Deserialization of health check response failed");
            return string.Empty;
        }

        logger.LogInformation("Health check successful");
        return JsonSerializer.Serialize(healthCheck);
    }
}
